{
  "BLoC Event Class": {
    "prefix": "bloc_event",
    "body": [
      "import 'package:equatable/equatable.dart';",
      "",
      "abstract class ${1:Feature}Event extends Equatable {",
      "  const ${1:Feature}Event();",
      "",
      "  @override",
      "  List<Object> get props => [];",
      "}",
      "",
      "class ${1:Feature}${2:Action}Requested extends ${1:Feature}Event {",
      "  ${3:// Add required parameters}",
      "",
      "  const ${1:Feature}${2:Action}Requested({${4:// parameters}});",
      "",
      "  @override",
      "  List<Object> get props => [${5:// parameters}];",
      "}"
    ],
    "description": "Create a BLoC event class with Equatable"
  },
  "BLoC State Class": {
    "prefix": "bloc_state",
    "body": [
      "import 'package:equatable/equatable.dart';",
      "",
      "abstract class ${1:Feature}State extends Equatable {",
      "  const ${1:Feature}State();",
      "",
      "  @override",
      "  List<Object> get props => [];",
      "}",
      "",
      "class ${1:Feature}Initial extends ${1:Feature}State {}",
      "",
      "class ${1:Feature}Loading extends ${1:Feature}State {}",
      "",
      "class ${1:Feature}Loaded extends ${1:Feature}State {",
      "  final ${2:DataType} ${3:data};",
      "",
      "  const ${1:Feature}Loaded({required this.${3:data}});",
      "",
      "  @override",
      "  List<Object> get props => [${3:data}];",
      "}",
      "",
      "class ${1:Feature}Error extends ${1:Feature}State {",
      "  final String message;",
      "",
      "  const ${1:Feature}Error({required this.message});",
      "",
      "  @override",
      "  List<Object> get props => [message];",
      "}"
    ],
    "description": "Create a BLoC state class with common states"
  },
  "BLoC Class": {
    "prefix": "bloc_bloc",
    "body": [
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "import '../../repositories/${1:feature}_repository.dart';",
      "import '${1:feature}_event.dart';",
      "import '${1:feature}_state.dart';",
      "",
      "class ${2:Feature}Bloc extends Bloc<${2:Feature}Event, ${2:Feature}State> {",
      "  final ${2:Feature}Repository _${1:feature}Repository;",
      "",
      "  ${2:Feature}Bloc({required ${2:Feature}Repository ${1:feature}Repository})",
      "      : _${1:feature}Repository = ${1:feature}Repository,",
      "        super(${2:Feature}Initial()) {",
      "    ",
      "    on<${2:Feature}${3:Action}Requested>(_on${3:Action}Requested);",
      "  }",
      "",
      "  Future<void> _on${3:Action}Requested(",
      "    ${2:Feature}${3:Action}Requested event,",
      "    Emitter<${2:Feature}State> emit,",
      "  ) async {",
      "    emit(${2:Feature}Loading());",
      "    ",
      "    try {",
      "      ${4:// Implement business logic}",
      "      final result = await _${1:feature}Repository.${5:method}();",
      "      emit(${2:Feature}Loaded(data: result));",
      "    } catch (e) {",
      "      emit(${2:Feature}Error(message: e.toString()));",
      "    }",
      "  }",
      "}"
    ],
    "description": "Create a complete BLoC class"
  },
  "Repository Class": {
    "prefix": "repo_class",
    "body": [
      "import '../api/api_service.dart';",
      "import '../api/api_models.dart';",
      "import '../models/${1:model}.dart';",
      "",
      "class ${2:Feature}Repository {",
      "  final ApiService _apiService;",
      "",
      "  ${2:Feature}Repository({ApiService? apiService}) ",
      "      : _apiService = apiService ?? ApiService();",
      "",
      "  Future<List<${3:Model}>> get${3:Model}s() async {",
      "    try {",
      "      final response = await _apiService.get${3:Model}s();",
      "      return response.map(_mapResponseToModel).toList();",
      "    } catch (e) {",
      "      throw Exception('Failed to fetch ${1:model}s: \\${e.toString()}');",
      "    }",
      "  }",
      "",
      "  Future<${3:Model}> create${3:Model}({${4:// parameters}}) async {",
      "    try {",
      "      final request = Create${3:Model}Request(${5:// parameters});",
      "      final response = await _apiService.create${3:Model}(request);",
      "      return _mapResponseToModel(response);",
      "    } catch (e) {",
      "      throw Exception('Failed to create ${1:model}: \\${e.toString()}');",
      "    }",
      "  }",
      "",
      "  ${3:Model} _mapResponseToModel(${3:Model}Response response) {",
      "    return ${3:Model}(",
      "      ${6:// Map response to model}",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a repository class template"
  },
  "Flutter Screen with BLoC": {
    "prefix": "screen_bloc",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "import '../../blocs/${1:feature}/${1:feature}_bloc.dart';",
      "import '../../blocs/${1:feature}/${1:feature}_event.dart';",
      "import '../../blocs/${1:feature}/${1:feature}_state.dart';",
      "",
      "class ${2:Screen}Screen extends StatefulWidget {",
      "  const ${2:Screen}Screen({super.key});",
      "",
      "  @override",
      "  State<${2:Screen}Screen> createState() => _${2:Screen}ScreenState();",
      "}",
      "",
      "class _${2:Screen}ScreenState extends State<${2:Screen}Screen> {",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    context.read<${3:Feature}Bloc>().add(${4:InitialEvent}());",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${5:Screen Title}'),",
      "      ),",
      "      body: BlocBuilder<${3:Feature}Bloc, ${3:Feature}State>(",
      "        builder: (context, state) {",
      "          if (state is ${3:Feature}Initial || state is ${3:Feature}Loading) {",
      "            return const Center(child: CircularProgressIndicator());",
      "          } else if (state is ${3:Feature}Error) {",
      "            return Center(",
      "              child: Text('Error: \\${state.message}'),",
      "            );",
      "          } else if (state is ${3:Feature}Loaded) {",
      "            return ${6:// Build loaded UI};",
      "          }",
      "          return const SizedBox.shrink();",
      "        },",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Flutter screen with BLoC integration"
  },
  "API Models": {
    "prefix": "api_models",
    "body": [
      "class ${1:Action}Request {",
      "  ${2:// Add request fields}",
      "",
      "  ${1:Action}Request({${3:// parameters}});",
      "",
      "  Map<String, dynamic> toJson() => {",
      "    ${4:// Map to JSON}",
      "  };",
      "}",
      "",
      "class ${1:Action}Response {",
      "  ${5:// Add response fields}",
      "",
      "  ${1:Action}Response({${6:// parameters}});",
      "",
      "  factory ${1:Action}Response.fromJson(Map<String, dynamic> json) => ${1:Action}Response(",
      "    ${7:// Map from JSON}",
      "  );",
      "}"
    ],
    "description": "Create API request and response models"
  }
}